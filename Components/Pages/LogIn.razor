@page "/"
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager Navigation
@using Models
@using Microsoft.AspNetCore.Authorization
@inject UserReq UserReqService

<div class="parent_signin">
    <div class="signin_signup">
        <div class="signin">
            Sign In
        </div>
        <div class="signup" @onclick="NavigateToSignUp">
            Sign up
        </div>
    </div>
</div>

<div class="Welcome_txt">
    <div> Welcome to</div>
    <div>Boxing 4 Change</div>
</div>

<div class="LogIn">
    <EditForm Model="@loginModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group_login">
            <InputText id="email" @bind-Value="email" class="form_control_login"  placeholder="EMAIL" />
            <ValidationMessage For="@(() => loginModel.Email)" />
        </div>
        <div class="form-group_login">
            <InputText id="password" @bind-Value="password" type="password" class="form_control_login" placeholder="PASSWORD" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>
        <div class="forgot">
            <p href="">Forgot password?</p>
        </div>
        <button class="btn-primary_login" @onclick="LogInReq">Log in</button>
    </EditForm>
</div>
@if(notFound==true)
{
    <p>Retry!!!</p>
}
@if(emailNotVerified)
{
    <p>Email is not verified!</p>
}

@if (accessType == NetworkAccess.None)
{
    <p>Check internet connection!</p>
}
@code {

    NetworkAccess accessType = Connectivity.Current.NetworkAccess;
    private LoginModel loginModel = new LoginModel();
    private bool notFound = false;
    private string email { get; set; }
    private string password { get; set; }
    private bool emailNotVerified { get; set; } = false; 

    private void NavigateToSignUp()
    {
        try
        {
            Navigation.NavigateTo("signup");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Navigation error: {ex.Message}");
        }
    }
    private void HandleValidSubmit()
    {

    }

    private async Task LogInReq()
    {
        try
        {
            var user = await UserReqService.GetUserAsync(email,password);

            if (user != null)
            {
                if(user.isVerified is true)
                {
                    if(user.Role == "Student")
                    {
                        Navigation.NavigateTo("student");
                    }
                    else
                    if(user.Role == "Trainer")
                    {
                        Navigation.NavigateTo("trainer");
                    }
                }
                else
                {
                    emailNotVerified = true;
                    StateHasChanged();
                }
            }
            else
            {
                if (accessType == NetworkAccess.None)
                {
                    StateHasChanged();
                }
                else
                {
                    notFound = true;
                    StateHasChanged();
                }
            }
        }
        catch (HttpRequestException httpEx)
        {
            Console.WriteLine($"Request error: {httpEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"General error: {ex.Message}");
        }
    }


}
